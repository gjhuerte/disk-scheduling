/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DiskScheduling;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import static java.lang.Math.abs;
import javax.accessibility.AccessibleContext;
import javax.swing.JOptionPane;
import java.io.*;
import javax.swing.ImageIcon;
/**
 *
 * @author GJ
 */
public class launchFrame extends javax.swing.JFrame {

    Color defaultBackground = new Color(0,153,153);
    Color defaultForeground = new Color(0,51,51);
    int ctr = 0;
    static int ARRAY[] = new int[1000];
    static int SORTED_ARRAY[] = new int[1000];
    static int returnArray[] = new int[1000];
    static int END = 0;
    int THM = 0;
    static String DISPLAY;
    int x;
    float ST = 0;
    static int DIRECTION = 0;
    int temp_END = 0;
   
    
    public launchFrame() {  
        SplashScreen splash = new SplashScreen(1000);
        splash.showSplashAndExit();
        for( x = 0;x<1000;x++)
        {
            ARRAY[x] = '\0';
            SORTED_ARRAY[x] = '\0';
        }
        ImageIcon icon = new ImageIcon("rsc\\disk_scheduling.png");
        setIconImage(icon.getImage());
        initComponents();
        fcfsBttn.setSelected(true);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenu3 = new javax.swing.JMenu();
        panel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        exitBttn = new javax.swing.JButton();
        clearBttn = new javax.swing.JButton();
        diskSchedLbl = new javax.swing.JLabel();
        design1 = new javax.swing.JLabel();
        design2 = new javax.swing.JLabel();
        scanTypePanel = new javax.swing.JPanel();
        computeBttn = new javax.swing.JButton();
        fcfsBttn = new javax.swing.JRadioButton();
        sstfBttn = new javax.swing.JRadioButton();
        scanBttn = new javax.swing.JRadioButton();
        cScanBttn = new javax.swing.JRadioButton();
        lookBttn = new javax.swing.JRadioButton();
        scanTypeLbl = new javax.swing.JLabel();
        cLookBttn = new javax.swing.JRadioButton();
        infoPanel = new javax.swing.JPanel();
        trackNoLbl = new javax.swing.JLabel();
        CurrPosLbl = new javax.swing.JLabel();
        PrevPosLbl = new javax.swing.JLabel();
        dirLbl = new javax.swing.JLabel();
        seekRateLbl = new javax.swing.JLabel();
        trackNoField = new javax.swing.JTextField();
        currPosField = new javax.swing.JTextField();
        prevPosField = new javax.swing.JTextField();
        seekRateField = new javax.swing.JTextField();
        dirComboBox = new javax.swing.JComboBox();
        arrayLbl = new javax.swing.JLabel();
        arrayField = new javax.swing.JTextField();
        nextBttn = new javax.swing.JButton();
        endBttn = new javax.swing.JButton();
        editBttn = new javax.swing.JButton();
        editField = new javax.swing.JTextField();
        indexField = new javax.swing.JTextField();
        editLbl = new javax.swing.JLabel();
        prevPosBttn = new javax.swing.JToggleButton();
        valOfAField = new javax.swing.JTextField();
        StatusPanel = new javax.swing.JPanel();
        diagramScrollPane = new javax.swing.JScrollPane();
        statusArea = new javax.swing.JTextArea();
        showAreaBttn = new javax.swing.JLabel();
        showSortedArrayBttn = new javax.swing.JLabel();
        clearStatusAreaBttn = new javax.swing.JLabel();

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Disk Scheduling Algorithm");
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        setForeground(new java.awt.Color(255, 255, 255));
        setIconImages(null);
        setLocation(new java.awt.Point(50, 50));
        setName("Disk Scheduling Algorithm"); // NOI18N
        setUndecorated(true);
        setResizable(false);

        panel.setBackground(new java.awt.Color(0, 102, 102));
        panel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        exitBttn.setBackground(new java.awt.Color(0, 102, 102));
        exitBttn.setFont(diskSchedLbl.getFont());
        exitBttn.setForeground(new java.awt.Color(255, 255, 255));
        exitBttn.setText("Exit");
        exitBttn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 1, true));
        exitBttn.setContentAreaFilled(false);
        exitBttn.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        exitBttn.setDefaultCapable(false);
        exitBttn.setFocusPainted(false);
        exitBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBttnActionPerformed(evt);
            }
        });

        clearBttn.setBackground(new java.awt.Color(0, 153, 153));
        clearBttn.setFont(diskSchedLbl.getFont());
        clearBttn.setForeground(new java.awt.Color(255, 255, 255));
        clearBttn.setText("Clear");
        clearBttn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 1, true));
        clearBttn.setContentAreaFilled(false);
        clearBttn.setEnabled(false);
        clearBttn.setRequestFocusEnabled(false);
        clearBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBttnActionPerformed(evt);
            }
        });

        diskSchedLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        diskSchedLbl.setForeground(new java.awt.Color(255, 255, 255));
        diskSchedLbl.setText("Disk Scheduling Algorithm");

        design1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DiskScheduling/socbiz-loader.gif"))); // NOI18N
        design1.setText("jLabel2");

        design2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DiskScheduling/socbiz-loader.gif"))); // NOI18N
        design2.setText("jLabel2");

        scanTypePanel.setBackground(new java.awt.Color(0, 102, 102));
        scanTypePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        computeBttn.setBackground(new java.awt.Color(255, 255, 255));
        computeBttn.setFont(diskSchedLbl.getFont());
        computeBttn.setForeground(new java.awt.Color(0, 51, 51));
        computeBttn.setText("Compute");
        computeBttn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        computeBttn.setBorderPainted(false);
        computeBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeBttnActionPerformed(evt);
            }
        });

        fcfsBttn.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup1.add(fcfsBttn);
        fcfsBttn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fcfsBttn.setForeground(new java.awt.Color(255, 255, 255));
        fcfsBttn.setText("First Come First Serve");
        fcfsBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fcfsBttnActionPerformed(evt);
            }
        });

        sstfBttn.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup1.add(sstfBttn);
        sstfBttn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sstfBttn.setForeground(new java.awt.Color(255, 255, 255));
        sstfBttn.setText("Shortest Seek Time First");
        sstfBttn.setActionCommand("");
        sstfBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sstfBttnActionPerformed(evt);
            }
        });

        scanBttn.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup1.add(scanBttn);
        scanBttn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scanBttn.setForeground(new java.awt.Color(255, 255, 255));
        scanBttn.setText("SCAN");
        scanBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanBttnActionPerformed(evt);
            }
        });

        cScanBttn.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup1.add(cScanBttn);
        cScanBttn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cScanBttn.setForeground(new java.awt.Color(255, 255, 255));
        cScanBttn.setText("C-SCAN");
        cScanBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cScanBttnActionPerformed(evt);
            }
        });

        lookBttn.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup1.add(lookBttn);
        lookBttn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lookBttn.setForeground(new java.awt.Color(255, 255, 255));
        lookBttn.setText("LOOK");
        lookBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookBttnActionPerformed(evt);
            }
        });

        scanTypeLbl.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        scanTypeLbl.setForeground(new java.awt.Color(255, 255, 255));
        scanTypeLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scanTypeLbl.setText("Scan Type");
        scanTypeLbl.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cLookBttn.setBackground(new java.awt.Color(0, 102, 102));
        buttonGroup1.add(cLookBttn);
        cLookBttn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cLookBttn.setForeground(new java.awt.Color(255, 255, 255));
        cLookBttn.setText("C-LOOK");
        cLookBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cLookBttnActionPerformed(evt);
            }
        });

        infoPanel.setBackground(new java.awt.Color(0, 102, 102));
        infoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        trackNoLbl.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        trackNoLbl.setForeground(new java.awt.Color(255, 255, 255));
        trackNoLbl.setText("No. of tracks:");
        trackNoLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        CurrPosLbl.setFont(trackNoLbl.getFont());
        CurrPosLbl.setForeground(new java.awt.Color(255, 255, 255));
        CurrPosLbl.setText("Current Position:");
        CurrPosLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        PrevPosLbl.setFont(trackNoLbl.getFont());
        PrevPosLbl.setForeground(new java.awt.Color(255, 255, 255));
        PrevPosLbl.setText("Previous Position:");
        PrevPosLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        dirLbl.setFont(trackNoLbl.getFont());
        dirLbl.setForeground(new java.awt.Color(255, 255, 255));
        dirLbl.setText("Direction:");
        dirLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        seekRateLbl.setFont(trackNoLbl.getFont());
        seekRateLbl.setForeground(new java.awt.Color(255, 255, 255));
        seekRateLbl.setText("Seek Rate (ms):");
        seekRateLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        trackNoField.setBackground(new java.awt.Color(0, 102, 102));
        trackNoField.setFont(trackNoLbl.getFont());
        trackNoField.setForeground(new java.awt.Color(255, 255, 255));
        trackNoField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        trackNoField.setText("0");
        trackNoField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 1, true));
        trackNoField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        trackNoField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                trackNoFieldKeyReleased(evt);
            }
        });

        currPosField.setBackground(new java.awt.Color(0, 102, 102));
        currPosField.setFont(trackNoLbl.getFont());
        currPosField.setForeground(new java.awt.Color(255, 255, 255));
        currPosField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        currPosField.setText("0");
        currPosField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 1, true));
        currPosField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                currPosFieldKeyReleased(evt);
            }
        });

        prevPosField.setBackground(new java.awt.Color(0, 102, 102));
        prevPosField.setFont(trackNoLbl.getFont());
        prevPosField.setForeground(new java.awt.Color(255, 255, 255));
        prevPosField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        prevPosField.setText("0");
        prevPosField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 1, true));
        prevPosField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                prevPosFieldKeyReleased(evt);
            }
        });

        seekRateField.setBackground(new java.awt.Color(0, 102, 102));
        seekRateField.setFont(trackNoLbl.getFont());
        seekRateField.setForeground(new java.awt.Color(255, 255, 255));
        seekRateField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        seekRateField.setText("0");
        seekRateField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 1, true));
        seekRateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seekRateFieldActionPerformed(evt);
            }
        });
        seekRateField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                seekRateFieldKeyReleased(evt);
            }
        });

        dirComboBox.setBackground(new java.awt.Color(0, 153, 153));
        dirComboBox.setFont(diskSchedLbl.getFont());
        dirComboBox.setForeground(new java.awt.Color(0, 204, 204));
        dirComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "UPWARD", "DOWNWARD" }));
        dirComboBox.setEnabled(false);

        arrayLbl.setFont(trackNoLbl.getFont());
        arrayLbl.setForeground(new java.awt.Color(255, 255, 255));
        arrayLbl.setText("Array ["+ctr+"] value:");

        arrayField.setBackground(new java.awt.Color(0, 102, 102));
        arrayField.setFont(trackNoLbl.getFont());
        arrayField.setForeground(new java.awt.Color(255, 255, 255));
        arrayField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        arrayField.setText("0");
        arrayField.setToolTipText("");
        arrayField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 255), 1, true));
        arrayField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                arrayFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                arrayFieldKeyReleased(evt);
            }
        });

        nextBttn.setBackground(new java.awt.Color(255, 255, 255));
        nextBttn.setFont(diskSchedLbl.getFont());
        nextBttn.setForeground(new java.awt.Color(0, 51, 51));
        nextBttn.setText("ADD");
        nextBttn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        nextBttn.setBorderPainted(false);
        nextBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBttnActionPerformed(evt);
            }
        });

        endBttn.setBackground(new java.awt.Color(255, 255, 255));
        endBttn.setFont(diskSchedLbl.getFont());
        endBttn.setForeground(new java.awt.Color(0, 51, 51));
        endBttn.setText("END");
        endBttn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        endBttn.setBorderPainted(false);
        endBttn.setEnabled(false);
        endBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endBttnActionPerformed(evt);
            }
        });

        editBttn.setBackground(new java.awt.Color(255, 255, 255));
        editBttn.setFont(diskSchedLbl.getFont());
        editBttn.setForeground(new java.awt.Color(0, 51, 51));
        editBttn.setText("EDIT");
        editBttn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        editBttn.setBorderPainted(false);
        editBttn.setEnabled(false);
        editBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBttnActionPerformed(evt);
            }
        });

        editField.setBackground(new java.awt.Color(0, 102, 102));
        editField.setForeground(new java.awt.Color(255, 255, 255));
        editField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        editField.setText("0");
        editField.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Replacement No.", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        editField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFieldActionPerformed(evt);
            }
        });

        indexField.setBackground(new java.awt.Color(0, 102, 102));
        indexField.setForeground(new java.awt.Color(255, 255, 255));
        indexField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        indexField.setText("0");
        indexField.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Index of Array", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        editLbl.setFont(trackNoLbl.getFont());
        editLbl.setForeground(new java.awt.Color(255, 255, 255));
        editLbl.setText("Edit:");

        prevPosBttn.setBackground(new java.awt.Color(255, 255, 255));
        prevPosBttn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        prevPosBttn.setText("ON");
        prevPosBttn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        prevPosBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevPosBttnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createSequentialGroup()
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addComponent(CurrPosLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(302, 302, 302))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, infoPanelLayout.createSequentialGroup()
                                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(trackNoLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(PrevPosLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dirLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(331, 331, 331))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(seekRateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(infoPanelLayout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(editLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(arrayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(seekRateField, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(infoPanelLayout.createSequentialGroup()
                                        .addGap(69, 69, 69)
                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(infoPanelLayout.createSequentialGroup()
                                                .addComponent(indexField)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(editField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(editBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(infoPanelLayout.createSequentialGroup()
                                                .addComponent(arrayField, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(nextBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                                .addComponent(endBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addComponent(dirComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(currPosField, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(trackNoField, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addComponent(prevPosBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(prevPosField, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(trackNoField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CurrPosLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(currPosField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PrevPosLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(prevPosField, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(prevPosBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(trackNoLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dirComboBox)
                    .addComponent(dirLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seekRateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seekRateField, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(arrayField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(endBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(nextBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(arrayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(editLbl)
                        .addGap(0, 14, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(indexField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(editField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                            .addComponent(editBttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        valOfAField.setBackground(new java.awt.Color(0, 102, 102));
        valOfAField.setForeground(new java.awt.Color(255, 255, 255));
        valOfAField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valOfAField.setText("0");
        valOfAField.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Value of a", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        valOfAField.setCaretColor(new java.awt.Color(255, 255, 255));
        valOfAField.setEnabled(false);

        javax.swing.GroupLayout scanTypePanelLayout = new javax.swing.GroupLayout(scanTypePanel);
        scanTypePanel.setLayout(scanTypePanelLayout);
        scanTypePanelLayout.setHorizontalGroup(
            scanTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scanTypePanelLayout.createSequentialGroup()
                .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(scanTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fcfsBttn)
                    .addComponent(scanBttn)
                    .addComponent(computeBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sstfBttn)
                    .addComponent(cLookBttn)
                    .addComponent(scanTypeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lookBttn)
                    .addGroup(scanTypePanelLayout.createSequentialGroup()
                        .addComponent(cScanBttn)
                        .addGap(18, 18, 18)
                        .addComponent(valOfAField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(1348, Short.MAX_VALUE))
        );
        scanTypePanelLayout.setVerticalGroup(
            scanTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scanTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scanTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, scanTypePanelLayout.createSequentialGroup()
                        .addComponent(scanTypeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fcfsBttn)
                        .addGap(29, 29, 29)
                        .addComponent(sstfBttn)
                        .addGap(32, 32, 32)
                        .addComponent(scanBttn)
                        .addGroup(scanTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(scanTypePanelLayout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(lookBttn)
                                .addGap(40, 40, 40)
                                .addComponent(cScanBttn)
                                .addGap(37, 37, 37))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scanTypePanelLayout.createSequentialGroup()
                                .addGap(121, 121, 121)
                                .addComponent(valOfAField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)))
                        .addComponent(cLookBttn)
                        .addGap(18, 18, 18)
                        .addComponent(computeBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(348, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(design1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(design2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(240, 240, 240)
                .addComponent(diskSchedLbl)
                .addGap(222, 222, 222)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exitBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(scanTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(design1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(design2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(diskSchedLbl)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(exitBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(13, 13, 13)
                .addComponent(scanTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        StatusPanel.setBackground(new java.awt.Color(0, 102, 102));
        StatusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Status", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, diskSchedLbl.getFont(), new java.awt.Color(255, 255, 255)));
        StatusPanel.setForeground(new java.awt.Color(255, 255, 255));

        diagramScrollPane.setBackground(new java.awt.Color(0, 102, 102));
        diagramScrollPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 255, 255), new java.awt.Color(0, 102, 102), new java.awt.Color(0, 255, 255), new java.awt.Color(0, 204, 255)));
        diagramScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        diagramScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        diagramScrollPane.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N

        statusArea.setEditable(false);
        statusArea.setBackground(new java.awt.Color(0, 102, 102));
        statusArea.setColumns(20);
        statusArea.setForeground(new java.awt.Color(255, 255, 255));
        statusArea.setRows(5);
        statusArea.setText("Status...");
        statusArea.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 102, 102), new java.awt.Color(0, 102, 102)));
        diagramScrollPane.setViewportView(statusArea);

        showAreaBttn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        showAreaBttn.setForeground(new java.awt.Color(255, 255, 255));
        showAreaBttn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        showAreaBttn.setText("A");
        showAreaBttn.setToolTipText("Show Array");
        showAreaBttn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 255), 1, true));
        showAreaBttn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showAreaBttnMouseClicked(evt);
            }
        });

        showSortedArrayBttn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        showSortedArrayBttn.setForeground(new java.awt.Color(255, 255, 255));
        showSortedArrayBttn.setText("SA");
        showSortedArrayBttn.setToolTipText("Show Sorted Array if available");
        showSortedArrayBttn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 204), 1, true));
        showSortedArrayBttn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showSortedArrayBttnMouseClicked(evt);
            }
        });

        clearStatusAreaBttn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        clearStatusAreaBttn.setForeground(new java.awt.Color(255, 255, 255));
        clearStatusAreaBttn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clearStatusAreaBttn.setText("C");
        clearStatusAreaBttn.setToolTipText("Clear");
        clearStatusAreaBttn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 255), 1, true));
        clearStatusAreaBttn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearStatusAreaBttnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout StatusPanelLayout = new javax.swing.GroupLayout(StatusPanel);
        StatusPanel.setLayout(StatusPanelLayout);
        StatusPanelLayout.setHorizontalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusPanelLayout.createSequentialGroup()
                .addComponent(diagramScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 846, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(showSortedArrayBttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showAreaBttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearStatusAreaBttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        StatusPanelLayout.setVerticalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusPanelLayout.createSequentialGroup()
                .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(StatusPanelLayout.createSequentialGroup()
                        .addComponent(showAreaBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(showSortedArrayBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearStatusAreaBttn))
                    .addComponent(diagramScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelLayout.createSequentialGroup()
                .addComponent(StatusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(StatusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 895, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cLookBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cLookBttnActionPerformed
        valOfAField.setEnabled(true);
    }//GEN-LAST:event_cLookBttnActionPerformed

    private void lookBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookBttnActionPerformed
        valOfAField.setEnabled(false);
    }//GEN-LAST:event_lookBttnActionPerformed

    private void cScanBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cScanBttnActionPerformed
        valOfAField.setEnabled(true);
    }//GEN-LAST:event_cScanBttnActionPerformed

    private void scanBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanBttnActionPerformed
        valOfAField.setEnabled(false);
    }//GEN-LAST:event_scanBttnActionPerformed

    private void sstfBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sstfBttnActionPerformed
        valOfAField.setEnabled(false);
    }//GEN-LAST:event_sstfBttnActionPerformed

    private void fcfsBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fcfsBttnActionPerformed
        valOfAField.setEnabled(false);
    }//GEN-LAST:event_fcfsBttnActionPerformed

    private void computeBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeBttnActionPerformed

        statusArea.setText(statusArea.getText()+"\nComputing . . .");
        END = temp_END;
        try
        {
            if(fcfsBttn.isSelected() == true)
                fcfsProcess();
            else
            {
                sortArray();
                if(cScanBttn.isSelected()==true)
                c_scanProcess();

                if(scanBttn.isSelected() == true)
                scanProcess();

                if(lookBttn.isSelected()==true)
                lookProcess();

                if(cLookBttn.isSelected()==true)
                c_lookProcess();

                if(sstfBttn.isSelected()==true)
                sstfProcess();
            }

            ResultingWindow r = new ResultingWindow();
            statusArea.setText(statusArea.getText()+"\n"+DISPLAY);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }

    }//GEN-LAST:event_computeBttnActionPerformed

    private void clearBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBttnActionPerformed
        trackNoField.setText("0");
        currPosField.setText("0");
        prevPosField.setText("0");
        seekRateField.setText("0");
        arrayField.setText("");
        indexField.setText("0");
        editField.setText("0");
        statusArea.setText("");
        nextBttn.setEnabled(true);
        arrayField.setEnabled(true);

        for( x = 0;x<END;x++)
        {
            ARRAY[x] = '\0';
            SORTED_ARRAY[x] = '\0';
        }

        END = 0;
        ctr = 0;
        arrayLbl.setText("Array [0]:");
        statusArea.setText("Cleared!!");
    }//GEN-LAST:event_clearBttnActionPerformed

    private void exitBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBttnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitBttnActionPerformed

    private void prevPosBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevPosBttnActionPerformed
        if(prevPosBttn.isSelected())
        {
            dirComboBox.setEnabled(true);
            prevPosField.setEnabled(false);
            prevPosBttn.setText("OFF");
        }
        else
        {
            prevPosBttn.setText("ON");
            prevPosField.setEnabled(true);
            dirComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_prevPosBttnActionPerformed

    private void editBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBttnActionPerformed
        try
        {
            int no = Integer.parseInt(editField.getText());
            int x = Integer.parseInt(indexField.getText());
            ARRAY[x] = no;
            statusArea.setText(statusArea.getText()+"\n"+"Edited: Array no."+x+". "+no);
            editField.setText("0");
            indexField.setText("0");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Please input a number!","Status: Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_editBttnActionPerformed

    private void endBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endBttnActionPerformed
        if(END>0)
        {
            statusArea.setText(statusArea.getText()+"\n"+"Array input ended at Array no. "+(END-1));
            nextBttn.setEnabled(false);
            computeBttn.setEnabled(true);
            arrayField.setEnabled(false);
            endBttn.setEnabled(false);
        }
        else
        {
            nextBttn.setForeground(defaultForeground);
            computeBttn.setForeground(defaultForeground);
            arrayField.setForeground(defaultForeground);
            endBttn.setForeground(defaultForeground);
            JOptionPane.showMessageDialog(null,"Please input a number!","Status: Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_endBttnActionPerformed

    private void nextBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBttnActionPerformed
        int SUCCESS = saveValuesToArray();
        if(SUCCESS == 0)
        {
            endBttn.setEnabled(true);
            editBttn.setEnabled(true);
            clearBttn.setEnabled(true);
        }
    }//GEN-LAST:event_nextBttnActionPerformed

    private void arrayFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_arrayFieldKeyPressed
        if(evt.getKeyCode() == 10)
        {
            int SUCCESS = saveValuesToArray();
            if(SUCCESS == 0)
            {
                endBttn.setEnabled(true);
                editBttn.setEnabled(true);
                clearBttn.setEnabled(true);
            }
        }
    }//GEN-LAST:event_arrayFieldKeyPressed

    private void seekRateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seekRateFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seekRateFieldActionPerformed

    private void editFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editFieldActionPerformed

    private void showAreaBttnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showAreaBttnMouseClicked
        statusArea.setText("Array List:\n");
        for(x = 0;x<END;x++)
            statusArea.setText(statusArea.getText()+"\n"+"Array no. "+x+": "+ARRAY[x]);
    }//GEN-LAST:event_showAreaBttnMouseClicked

    private void showSortedArrayBttnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showSortedArrayBttnMouseClicked
        statusArea.setText("Sorted Array List:\n");
        for(x = 0;x<END;x++)
            statusArea.setText(statusArea.getText()+"\n"+"Array no. "+x+": "+SORTED_ARRAY[x]);
    }//GEN-LAST:event_showSortedArrayBttnMouseClicked

    private void clearStatusAreaBttnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearStatusAreaBttnMouseClicked
        statusArea.setText("");
    }//GEN-LAST:event_clearStatusAreaBttnMouseClicked

    private void trackNoFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_trackNoFieldKeyReleased
        try
        {
            int x = Integer.parseInt(trackNoField.getText());
            if(evt.getKeyCode()==10);
            else
            if(x<0)
            {
                JOptionPane.showMessageDialog(null,"Number of tracks must not be negative","Status:Error",JOptionPane.ERROR_MESSAGE);
                trackNoField.setText("0");
            }
            else if(END>0)
            {
                sortArray();
                if(x<SORTED_ARRAY[END-1])
                {
                    JOptionPane.showMessageDialog(null,"Track number must not be less than the Array inputted","Status:Error",JOptionPane.ERROR_MESSAGE);
                    trackNoField.setText("0");
                }
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Invalid Input!","Status:Error",JOptionPane.ERROR_MESSAGE);
                trackNoField.setText("0");
        }
    }//GEN-LAST:event_trackNoFieldKeyReleased

    private void currPosFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currPosFieldKeyReleased
        try
        {
            int x = Integer.parseInt(currPosField.getText());
            int y = Integer.parseInt(trackNoField.getText());
            if(evt.getKeyCode()==10);
            else
            if((x>=y)||(x<0))
            {
                currPosField.setText("0");
                JOptionPane.showMessageDialog(null,"Input does not match the range!","Status:Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Invalid Input!","Status:Error",JOptionPane.ERROR_MESSAGE);
            currPosField.setText("0");
        }
    }//GEN-LAST:event_currPosFieldKeyReleased

    private void prevPosFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_prevPosFieldKeyReleased
                try
        {
            int x = Integer.parseInt(prevPosField.getText());
            int y = Integer.parseInt(trackNoField.getText());
            if(evt.getKeyCode()==10);
            else
            if((x>=y)||(x<0))
            {
                prevPosField.setText("0");
                JOptionPane.showMessageDialog(null,"Input does not match the range!","Status:Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Invalid Input!","Status:Error",JOptionPane.ERROR_MESSAGE);
            prevPosField.setText("0");
        }
    }//GEN-LAST:event_prevPosFieldKeyReleased

    private void seekRateFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seekRateFieldKeyReleased
        try
        {
            int x = Integer.parseInt(seekRateField.getText());
            if(evt.getKeyCode()==10);
            else
            if((x<0))
            {
                seekRateField.setText("0");
                JOptionPane.showMessageDialog(null,"Must be greater than or equal to zero!","Status:Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Invalid Input!","Status:Error",JOptionPane.ERROR_MESSAGE);
            seekRateField.setText("0");
        }
    }//GEN-LAST:event_seekRateFieldKeyReleased

    private void arrayFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_arrayFieldKeyReleased
        try
        {
            if(evt.getKeyCode()==10);
            else
            {
                int x = Integer.parseInt(arrayField.getText());
                int y = Integer.parseInt(trackNoField.getText());
                if(((x<0)||(x>=y)))
                {
                    JOptionPane.showMessageDialog(null,"Not in range!","Status:Error",JOptionPane.ERROR_MESSAGE);
                    arrayField.setText("0");
                }
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Invalid Input!","Status:Error",JOptionPane.ERROR_MESSAGE);
            arrayField.setText("0");
        }
    }//GEN-LAST:event_arrayFieldKeyReleased

    public void setAccessibleContext(AccessibleContext accessibleContext) {
        this.setLocationRelativeTo(null);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
       //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(launchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new launchFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CurrPosLbl;
    private javax.swing.JLabel PrevPosLbl;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTextField arrayField;
    private javax.swing.JLabel arrayLbl;
    private javax.swing.ButtonGroup buttonGroup1;
    private static javax.swing.JRadioButton cLookBttn;
    private static javax.swing.JRadioButton cScanBttn;
    private javax.swing.JButton clearBttn;
    private javax.swing.JLabel clearStatusAreaBttn;
    private javax.swing.JButton computeBttn;
    private static javax.swing.JTextField currPosField;
    private javax.swing.JLabel design1;
    private javax.swing.JLabel design2;
    private javax.swing.JScrollPane diagramScrollPane;
    private javax.swing.JComboBox dirComboBox;
    private javax.swing.JLabel dirLbl;
    private javax.swing.JLabel diskSchedLbl;
    private javax.swing.JButton editBttn;
    private javax.swing.JTextField editField;
    private javax.swing.JLabel editLbl;
    private javax.swing.JButton endBttn;
    private javax.swing.JButton exitBttn;
    private static javax.swing.JRadioButton fcfsBttn;
    private javax.swing.JTextField indexField;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JPanel jPanel1;
    private static javax.swing.JRadioButton lookBttn;
    private javax.swing.JButton nextBttn;
    private javax.swing.JPanel panel;
    private javax.swing.JToggleButton prevPosBttn;
    private static javax.swing.JTextField prevPosField;
    private static javax.swing.JRadioButton scanBttn;
    private javax.swing.JLabel scanTypeLbl;
    private javax.swing.JPanel scanTypePanel;
    private javax.swing.JTextField seekRateField;
    private javax.swing.JLabel seekRateLbl;
    private javax.swing.JLabel showAreaBttn;
    private javax.swing.JLabel showSortedArrayBttn;
    private static javax.swing.JRadioButton sstfBttn;
    private javax.swing.JTextArea statusArea;
    private static javax.swing.JTextField trackNoField;
    private javax.swing.JLabel trackNoLbl;
    private javax.swing.JTextField valOfAField;
    // End of variables declaration//GEN-END:variables

    private int saveValuesToArray() {
       int SUCCESS = 0;
       try
       {
           String temp_display;
           int TRACK = Integer.parseInt(trackNoField.getText());
           int NUMBER = Integer.parseInt(arrayField.getText());
           if(TRACK>0)
           temp_display  = "Number not in range! ( 0 to " +(TRACK-1)+" )";
           else
           temp_display  = "Input a number greater than 0!";   
           if((NUMBER>=0)&&(NUMBER<TRACK)){
                ARRAY[ctr] = NUMBER;
                ctr++;
                END = ctr;
                temp_END = END;
                statusArea.setText(statusArea.getText()+"\n"+arrayLbl.getText()+" "+NUMBER);
                arrayLbl.setText("Array ["+ctr+"] value:");
                arrayField.setText("");
                
            }
           else
           {
               SUCCESS = 1;
               JOptionPane.showMessageDialog(null,""+temp_display,"Status: Error!",JOptionPane.ERROR_MESSAGE);
           }
       }
       catch(NumberFormatException | HeadlessException e)
       {
           JOptionPane.showMessageDialog(null,"Please input a number!","Status: Error!",JOptionPane.ERROR_MESSAGE);
           SUCCESS = 1;
       }    
       
       return SUCCESS;
    }

    private void fcfsProcess() {
        try
        {
            for(x = 0;x<END;x++)
                returnArray[x]=ARRAY[x];
            THM = 0;
            int TEMP = Integer.parseInt(currPosField.getText());
            int VALUE = TEMP;
            int TRACK = Integer.parseInt(trackNoField.getText());
            float SEEK_RATE = Float.parseFloat(seekRateField.getText());
            DISPLAY = "First Come First Serve\n\n";
 
            for( x = 0;x<END;x++)
            {
                THM+= abs(ARRAY[x]-TEMP);
                TEMP = ARRAY[x];
            }
            
            ST = THM * SEEK_RATE;
            DISPLAY += "Total Head Movement:" + THM + "\n\n";
            DISPLAY += "Seek Time:" + ST +"ms\n\n";
       }
       catch(Exception e)
       {
            e.printStackTrace();}
       }  

    private void sortArray() {
        try
        {
            int same_number_ctr = 0;
            int currPos = Integer.parseInt(currPosField.getText());            
            
            for(x = 0;x<END;x++)
            {
                SORTED_ARRAY[x] = ARRAY[x];
            }
            
            for(x = 0;x+same_number_ctr<END;x++)
            {
                if(currPos==SORTED_ARRAY[x])same_number_ctr++;
                SORTED_ARRAY[x] = SORTED_ARRAY[x+same_number_ctr];
            }
                temp_END = END;
                END-=same_number_ctr;
                
            for(x = 0;x<END-1;x++)
                for(int y = 0;y<END-1;y++)
                    if(SORTED_ARRAY[y]>SORTED_ARRAY[y+1])
                    {
                        int TEMP = SORTED_ARRAY[y];
                        SORTED_ARRAY[y] = SORTED_ARRAY[y+1];
                        SORTED_ARRAY[y+1] = TEMP;
                    }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    private void c_scanProcess() {
        try
        {
            int highestValue = Integer.parseInt(trackNoField.getText())-1;
            int prevPos = Integer.parseInt(prevPosField.getText());
            int currPos = Integer.parseInt(currPosField.getText());
            int a = Integer.parseInt(valOfAField.getText());
            float SEEK_RATE = Float.parseFloat(seekRateField.getText());
            String direction = "";
            direction += dirComboBox.getSelectedItem();
            String a_string = "";
            DISPLAY = "C-SCAN\n\n";    

            for(x = 0;x<END;x++)
                if((SORTED_ARRAY[x]<currPos)&&(currPos<=SORTED_ARRAY[x+1]))
                        break;

            if(prevPosField.isEnabled() == true)
            {
                if(prevPos<currPos)
                {
                    THM = abs(highestValue-currPos) + abs(SORTED_ARRAY[x]);
                    DIRECTION = 1;
                }
                else
                    THM = abs(currPos) + abs(SORTED_ARRAY[x+1]-highestValue);
            }
            else
            {
                if(direction.equals("UPWARD"))
                {
                    THM = abs(currPos-highestValue) + abs(SORTED_ARRAY[x]);
                    DIRECTION = 1;
                }
                else
                    THM = abs(currPos) + abs(SORTED_ARRAY[x+1]-highestValue);
            }
            
            if( DIRECTION == 1 )
            {
                DIRECTION = 0;
                returnArray[0] = highestValue;
                returnArray[1] = 0;
                returnArray[2] = SORTED_ARRAY[x];
            }
            else
            {
                returnArray[0] = 0;
                returnArray[1] = highestValue;
                returnArray[2] = SORTED_ARRAY[x+1];
            }            

            if(a != 0)
                THM += a;
            else
                a_string = " + a";

            
            ST = (THM-a) * SEEK_RATE;
            DISPLAY += "Total Head Movement: " + THM + a_string + "\n\n";
            DISPLAY += "Seek Time:" + ST +"ms\n\n";
        }
        catch(Exception e)
        {
           e.printStackTrace();
        }
    }

    private void scanProcess() {
        try
        {
            int highestValue = Integer.parseInt(trackNoField.getText())-1;
            int prevPos = Integer.parseInt(prevPosField.getText());
            int currPos = Integer.parseInt(currPosField.getText());
            int SEEK_RATE = Integer.parseInt(seekRateField.getText());
            int lowestValue = 0;
            String direction = "";
            direction += dirComboBox.getSelectedItem();
            String a_string = "";
            DISPLAY = "SCAN\n\n";  

            if(prevPosField.isEnabled() == true)
            {
                if(prevPos<currPos)
                {
                    THM = abs(currPos-highestValue) + abs(highestValue-SORTED_ARRAY[0]);
                    DIRECTION = 1;
                }
                else
                {
                    THM = abs(currPos-0) + abs(SORTED_ARRAY[END-1]-0);
                }
                

            }
            else
            {
                if(direction.equals("UPWARD"))
                {
                    THM = abs(currPos-highestValue) + abs(highestValue-SORTED_ARRAY[0]);
                    DIRECTION = 1;
                }
                else
                    THM = abs(currPos-0) + abs(SORTED_ARRAY[END-1]-0);
            }
            
            if( DIRECTION == 1 )
            {
                returnArray[0]= highestValue;
                returnArray[1]= SORTED_ARRAY[0];
                DIRECTION = 0;
            }
            else
            {
                returnArray[0]= 0;
                returnArray[1]= SORTED_ARRAY[END-1];
            }    
                
            
            ST = THM * SEEK_RATE;
            DISPLAY += "Total Head Movement: " + THM + "\n\n";
            DISPLAY += "Seek Time:" + ST +"ms\n\n";            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    private void lookProcess() {
        try
        {
            int prevPos = Integer.parseInt(prevPosField.getText());
            int currPos = Integer.parseInt(currPosField.getText());
            float SEEK_RATE = Float.parseFloat(seekRateField.getText());
            int lowestValue = 0;
            String direction = "";
            direction += dirComboBox.getSelectedItem();
            String a_string = "";
            DISPLAY = "LOOK\n\n";
            
            returnArray[0]=ARRAY[0];
            returnArray[1]=ARRAY[END-1];
            
            if(prevPosField.isEnabled() == true)
            {
                if(prevPos<currPos)
                    THM = abs(currPos-SORTED_ARRAY[END-1]) + abs(SORTED_ARRAY[END-1]-SORTED_ARRAY[0]);
                else
                {
                    THM = abs(currPos-SORTED_ARRAY[0]) + abs(SORTED_ARRAY[END-1]-SORTED_ARRAY[0]);
                    DIRECTION = 1;
                }
            }
            else
            {
                if(direction.equals("UPWARD"))
                {
                    THM = abs(currPos-SORTED_ARRAY[END-1]) + abs(SORTED_ARRAY[END-1]-SORTED_ARRAY[0]);
                    DIRECTION = 1;
                }
                else
                    THM = abs(currPos-SORTED_ARRAY[0]) + abs(SORTED_ARRAY[END-1]-SORTED_ARRAY[0]);
            }
            
            
            
            if( DIRECTION == 1 )
            {
                DIRECTION = 0;
                returnArray[0]= SORTED_ARRAY[0];
                returnArray[1]= SORTED_ARRAY[END-1];
            }
            else
            {
                returnArray[0]= SORTED_ARRAY[END-1];
                returnArray[1]= SORTED_ARRAY[0];
            }
            
            ST = THM * SEEK_RATE;
            DISPLAY += "Total Head Movement: " + THM + "\n\n";
            DISPLAY += "Seek Time:" + ST +"ms\n\n";
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    private void c_lookProcess() {
         try
         {
            int prevPos = Integer.parseInt(prevPosField.getText());
            int currPos = Integer.parseInt(currPosField.getText());
            int a = Integer.parseInt(valOfAField.getText());
            float SEEK_RATE = Float.parseFloat(seekRateField.getText());
            String direction = "";
            direction += dirComboBox.getSelectedItem();
            String a_string = "";
            DISPLAY = "C-LOOK\n\n";
            for(x = 0;x<END;x++)
                if((SORTED_ARRAY[x]<currPos)&&(currPos<SORTED_ARRAY[x+1]))
                   break;

            if(prevPosField.isEnabled() == true)
            {
                if(prevPos<currPos)
                {
                    THM = abs(currPos-SORTED_ARRAY[END-1]) + abs(SORTED_ARRAY[0]-SORTED_ARRAY[x]);
                   DIRECTION = 1;
                }
                else
                    THM = abs(currPos-SORTED_ARRAY[0]) + abs(SORTED_ARRAY[x+1]-SORTED_ARRAY[END-1]);
            }
            else
            {
                if(direction.equals("UPWARD"))
                {
                    THM = abs(currPos-SORTED_ARRAY[END-1]) + abs(SORTED_ARRAY[0]-SORTED_ARRAY[x]);
                    DIRECTION = 1;
                }
                else
                    THM = abs(currPos-SORTED_ARRAY[0]) + abs(SORTED_ARRAY[x+1]-SORTED_ARRAY[END-1]);
            }

            if(a != 0)
                THM += a;
            else
                a_string = " + a";
            
            if( DIRECTION == 1 )
            {
                DIRECTION = 0;
                returnArray[0] = SORTED_ARRAY[END-1];
                returnArray[1] = SORTED_ARRAY[0];
                returnArray[2] = SORTED_ARRAY[x];
            }
            else
            {
                returnArray[0] = SORTED_ARRAY[0];
                returnArray[1] = SORTED_ARRAY[END-1];
                returnArray[2] = SORTED_ARRAY[x+1];
            }
            
            ST = (THM-a) * SEEK_RATE;
            DISPLAY += "Total Head Movement: " + THM + a_string + "\n\n";
            DISPLAY += "Seek Time:" + ST +"ms\n\n";             
         }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    private void sstfProcess() {
        try
        {
            int prevPos = Integer.parseInt(prevPosField.getText());
            int currPos = Integer.parseInt(currPosField.getText());
            float SEEK_RATE = Float.parseFloat(seekRateField.getText());
            int upward_direction = 0;
            DISPLAY = "Shortest Seek Time First\n\n";
            int ctr = 0;
            
            if(prevPos<currPos)
                upward_direction= 1;
            
            int LOWER = 0;
            int HIGHER = 0;
            int MID = 0;
            int repeat = 0;
            int temp_MID = x;
            
            for(x = 1;x<END;x++)
            if((SORTED_ARRAY[x-1]<=currPos)&&(currPos<SORTED_ARRAY[x]))
            {    
                if(abs(currPos-SORTED_ARRAY[x-1])==abs(currPos-SORTED_ARRAY[x]))
                {
                    if(upward_direction==0)
                    {
                        LOWER = x-2;
                        MID = x-1;
                        HIGHER = x;
                        returnArray[ctr++] = SORTED_ARRAY[x-1];
                    }
                    else
                    {
                        LOWER = x-1;
                        MID = x;
                        HIGHER = x+1;
                        returnArray[ctr++] = SORTED_ARRAY[x];
                    }
                }
                else if(abs(currPos-SORTED_ARRAY[x-1])<abs(currPos-SORTED_ARRAY[x]))
                {
                    LOWER = x-2;
                    MID = x-1;
                    HIGHER = x;
                    returnArray[ctr++] = SORTED_ARRAY[x-1];
                }
                else
                {
                    LOWER = x-1;
                    MID = x;
                    HIGHER = x+1;
                    returnArray[ctr++] = SORTED_ARRAY[x];                    
                }
                break;
            }
            
                temp_MID = MID;
            
            while(ctr<END)
            {
                if((LOWER<0)||(HIGHER==END))
                {
                    if((LOWER<0)&&(HIGHER<END))
                    {
                        while(ctr<END)
                        {
                            returnArray[ctr++] = SORTED_ARRAY[HIGHER++];
                            if((repeat == 0)&&(HIGHER>=END))
                            {
                                returnArray[ctr++] = SORTED_ARRAY[END-1];
                                repeat = 1;
                            }
                        }
                    }
                    else if((HIGHER==END)&&(LOWER>=0))
                        while(ctr<END)
                        {
                            returnArray[ctr++] = SORTED_ARRAY[LOWER--];
                        }
                }
                else
                {
                   if(abs(SORTED_ARRAY[MID]-SORTED_ARRAY[LOWER])<abs(SORTED_ARRAY[MID]-SORTED_ARRAY[HIGHER]))
                   {
                       if((temp_MID==x)||(temp_MID == x-1))
                            returnArray[ctr++] = SORTED_ARRAY[LOWER];
                       else
                           returnArray[ctr++] = SORTED_ARRAY[MID];
                        MID = LOWER--;
                   }
                   else if(abs(SORTED_ARRAY[MID]-SORTED_ARRAY[LOWER])>abs(SORTED_ARRAY[MID]-SORTED_ARRAY[HIGHER]))
                   {
                        if((temp_MID==x)||(temp_MID == x-1))
                        {
                            returnArray[ctr++] = SORTED_ARRAY[HIGHER];
                            MID = HIGHER++;
                        }
                        else
                        {
                            returnArray[ctr++] = SORTED_ARRAY[MID];
                             MID = HIGHER++;
                        
                            if((repeat == 0)&&(HIGHER>=END))
                            {
                                returnArray[ctr++] = SORTED_ARRAY[END-1];
                                repeat = 1;
                            }        
                        }                
                   }
                   else if(abs(SORTED_ARRAY[MID]-SORTED_ARRAY[LOWER])==abs(SORTED_ARRAY[MID]-SORTED_ARRAY[HIGHER]))
                   {
                       if(upward_direction == 0)
                        {
                            if((temp_MID==x)||(temp_MID == x-1))
                                 returnArray[ctr++] = SORTED_ARRAY[LOWER];
                            else
                                returnArray[ctr++] = SORTED_ARRAY[MID];
                             MID = LOWER--;
                        }
                       else
                       {
                            if((temp_MID==x)||(temp_MID == x-1))
                            {
                                returnArray[ctr++] = SORTED_ARRAY[HIGHER];
                                MID = HIGHER++;
                            }
                            else
                            {
                                returnArray[ctr++] = SORTED_ARRAY[MID];
                                 MID = HIGHER++;

                                if((repeat == 0)&&(HIGHER>=END))
                                {
                                    returnArray[ctr++] = SORTED_ARRAY[END-1];
                                    repeat = 1;
                                }        
                            }  
                       }
                   }
                }
            }
            
            THM=abs(currPos-returnArray[0]);
            for(ctr=1;ctr<END;ctr++)
                THM+=abs(returnArray[ctr-1]-returnArray[ctr]);
            
            
            ST = THM * SEEK_RATE;
            DISPLAY += "Total Head Movement: " + THM + "\n\n";
            DISPLAY += "Seek Time:" + ST +"ms\n\n";
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    public static int returnArray(int a)
    { 
        return(returnArray[a]);   
    }

    public static int returnLimit()
    {
        int LIMIT = Integer.parseInt(trackNoField.getText());
        return LIMIT;
    }

    public static String returnDisplay()
    {
        return DISPLAY;
    }
    
    public static int returnArrayCount()
    {
        return END;
    }

    public static int returnCurrentPosition()
    {
        final  int currPos = Integer.parseInt(currPosField.getText());
        return currPos;
    }

    public static int returnPreviousPosition()
    {
        final int prevPos = Integer.parseInt(prevPosField.getText());
        return prevPos;
    }
    
    public static int returnChosenProcess()
    {
        if(fcfsBttn.isSelected()==true)
            return 1;
        else
        if(sstfBttn.isSelected()==true)
            return 2;   
        else
        if(scanBttn.isSelected()==true)
            return 3;
        else
        if(lookBttn.isSelected()==true)
            return 4;    
        else
            return 5;
    }
}   

